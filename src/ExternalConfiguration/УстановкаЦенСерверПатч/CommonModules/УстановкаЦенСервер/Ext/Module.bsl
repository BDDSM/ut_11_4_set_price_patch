
//-- Общий модуль УТ 11.4.11.100

&Вместо("ИнициализироватьВыбранныеЦеныНоменклатуры")
Процедура уст_ц_ИнициализироватьВыбранныеЦеныНоменклатуры(Форма, МассивВидовЦен = Неопределено)
	
	// Таблица настроек СКД для видов цен с алгоритмом расчета цены "Заполнять по данным ИБ".
	НастройкиКомпоновкиДанных = ЗагрузитьТаблицуНастройкиКомпоновкиДанных(Форма);
	
	Форма.ВыбранныеЦены.Очистить();
	
	Таблица = ЗагрузитьСправочникВидовЦен(Форма, НастройкиКомпоновкиДанных, МассивВидовЦен);
	Для Каждого СтрокаТЧ Из Таблица Цикл
		
		Если СтрокаТЧ.Статус = Перечисления.СтатусыДействияВидовЦен.Действует Или
			(ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "ВидыЦен") И
			Форма.Объект.ВидыЦен.НайтиСтроки(Новый Структура("ВидЦены", СтрокаТЧ.Ссылка)).Количество()>0) Тогда
		
			НоваяСтрока = Форма.ВыбранныеЦены.Добавить();
			
			НоваяСтрока.УстанавливатьЦенуПриВводеНаОсновании = СтрокаТЧ.УстанавливатьЦенуПриВводеНаОсновании;
			НоваяСтрока.Формула                              = СтрокаТЧ.Формула;
			НоваяСтрока.Валюта                               = СтрокаТЧ.Валюта;
			НоваяСтрока.Идентификатор                        = СтрокаТЧ.Идентификатор;
			НоваяСтрока.ИмяКолонки                           = СтрокаТЧ.ИмяКолонки;
			НоваяСтрока.Наименование                         = СтрокаТЧ.Наименование;
			НоваяСтрока.ВариантОкругления                    = СтрокаТЧ.ВариантОкругления;
			НоваяСтрока.ПорогСрабатывания                    = СтрокаТЧ.ПорогСрабатывания;
			НоваяСтрока.РеквизитДопУпорядочивания            = СтрокаТЧ.РеквизитДопУпорядочивания;
			НоваяСтрока.СпособЗаданияЦены                    = СтрокаТЧ.СпособЗаданияЦены;
			НоваяСтрока.Ссылка                               = СтрокаТЧ.Ссылка;
			НоваяСтрока.Уровень                              = СтрокаТЧ.Уровень;
			НоваяСтрока.ЗапрещенныйВидЦены                   = СтрокаТЧ.ЗапрещенныйВидЦены;
			НоваяСтрока.БазовыйВидЦены                       = СтрокаТЧ.БазовыйВидЦены;
			НоваяСтрока.Наценка                              = СтрокаТЧ.Наценка;
			НоваяСтрока.ПометкаУдаления                      = СтрокаТЧ.ПометкаУдаления;
			
			// Служебные поля для работы с настройками СКД
			НоваяСтрока.АдресСхемыКомпоновкиДанных         = СтрокаТЧ.АдресСхемыКомпоновкиДанных;
			НоваяСтрока.АдресНастроекСхемыКомпоновкиДанных = СтрокаТЧ.АдресНастроекСхемыКомпоновкиДанных;
			НоваяСтрока.НайденыОбязательныеПараметры = СтрокаТЧ.НайденыОбязательныеПараметры;
			НоваяСтрока.Параметры                    = СтрокаТЧ.Параметры;
			
			НоваяСтрока.ПорогиСрабатывания.Загрузить(СтрокаТЧ.ПорогиСрабатывания);
			НоваяСтрока.ПравилаОкругленияЦены.Загрузить(СтрокаТЧ.ПравилаОкругленияЦены);
			НоваяСтрока.ЦеновыеГруппы.Загрузить(СтрокаТЧ.ЦеновыеГруппы);
			НоваяСтрока.ВлияющиеВидыЦен.Загрузить(СтрокаТЧ.ВлияющиеВидыЦен);
			НоваяСтрока.ВлияющиеЦены.ЗагрузитьЗначения(СтрокаТЧ.ВлияющиеЦены.ВыгрузитьЗначения());
			НоваяСтрока.ЗависимыеЦены.ЗагрузитьЗначения(СтрокаТЧ.ЗависимыеЦены.ВыгрузитьЗначения());
			
		КонецЕсли;
		
	КонецЦикла;
	Форма.ВыбранныеЦены.Сортировать("Уровень");
	
	ЕстьВидыЦенСКД = Ложь;
	ЕстьВидыЦенФормулы = Ложь;
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "ВидыЦен") Тогда
		Для Каждого СтрокаТЧ Из Форма.Объект.ВидыЦен Цикл
			СтрокаВидаЦен = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, СтрокаТЧ.ВидЦены);
			Если СтрокаВидаЦен <> Неопределено Тогда
				СтрокаВидаЦен.Выбрана = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаВидаЦен Из Форма.ВыбранныеЦены Цикл
		Если СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
			ИЛИ СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении Тогда
			ЕстьВидыЦенСКД = Истина;
		КонецЕсли;
		Если СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаДругойВидЦен
			ИЛИ СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен Тогда
			ЕстьВидыЦенФормулы = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьВидыЦенФормулы Тогда
		// Заполнить флаги "Влияет" и "Зависит"
		Для Каждого ВидЦены Из Форма.ВыбранныеЦены Цикл
			ВидЦены.Зависит = Ложь;
			ВидЦены.Влияет  = Ложь;
		КонецЦикла;
		
		Для Каждого ВидЦены Из Форма.ВыбранныеЦены Цикл
			
			Если ВидЦены.Выбрана Тогда
				
				Для Каждого ЗависимаяЦена Из ВидЦены.ЗависимыеЦены Цикл
					СтрокаЗависимойЦены         = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, ЗависимаяЦена.Значение);
					Если СтрокаЗависимойЦены <> Неопределено Тогда
						СтрокаЗависимойЦены.Зависит = Не СтрокаЗависимойЦены.Выбрана;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого ВлияющаяЦена Из ВидЦены.ВлияющиеЦены Цикл
					СтрокаВыбраннойЦены        = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, ВлияющаяЦена.Значение);
					Если СтрокаВыбраннойЦены <> Неопределено Тогда
						СтрокаВыбраннойЦены.Влияет = Не СтрокаВыбраннойЦены.Выбрана;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВыбранныеЦеныВыбратьВсеВлияющие",  "Видимость", ЕстьВидыЦенФормулы);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВыбранныеЦеныВыбратьВсеЗависимые", "Видимость", ЕстьВидыЦенФормулы);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВыбранныеЦеныЗависимыеЦены",       "Видимость", ЕстьВидыЦенФормулы);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВыбранныеЦеныВлияющиеЦены",        "Видимость", ЕстьВидыЦенФормулы);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДеревоЦенПереключательОтображатьВлияющиеЦены", "Видимость", ЕстьВидыЦенФормулы);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВыбранныеЦеныГруппаПараметры",                  "Видимость", ЕстьВидыЦенСКД);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВыбранныеЦеныВосстановитьНастройкиПоУмолчанию", "Видимость", ЕстьВидыЦенСКД);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВыбранныеЦеныРедактироватьНастройки",           "Видимость", ЕстьВидыЦенСКД);
	
	Форма.АдресХранилищаНастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(НастройкиКомпоновкиДанных, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

&Вместо("ПостроитьДеревоЦен")
Процедура уст_ц_ПостроитьДеревоЦен(Форма, ИмяТаблицы = "ДеревоЦен") Экспорт
	
	ДобавляемыеКолонкиТаблицыЦен = Новый Массив();
	УдаляемыеКолонкиТаблицыЦен   = Новый Массив();
	УдаляемыеЭлементы            = Новый Массив();
	УсловныеОформления           = Новый Массив();
	
	Если ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыКоллекция") Тогда
		ДеревоЗначений = Новый ТаблицаЗначений;
	Иначе
		ДеревоЗначений = Новый ДеревоЗначений;
	КонецЕсли;
	
	ДеревоЗначений.Колонки.Добавить("Номенклатура",               Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ДеревоЗначений.Колонки.Добавить("Характеристика",             Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ДеревоЗначений.Колонки.Добавить("ИндексКартинки",             Новый ОписаниеТипов("Число"));
	ДеревоЗначений.Колонки.Добавить("ЕдиницаИзмерения",           Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ДеревоЗначений.Колонки.Добавить("Артикул",                    Новый ОписаниеТипов("Строка"));
	ДеревоЗначений.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов("Булево"));
	
	Если ЭтоРегистрацияЦенПоставщика(Форма) Тогда
		
		ДеревоЗначений.Колонки.Добавить("НоменклатураПоставщика",     Новый ОписаниеТипов("СправочникСсылка.НоменклатураПоставщиков"));
		
		Если ЭтоЗагрузкаЦенПоставщикаИзВнешнихФайлов(Форма) Тогда
			ДеревоЗначений.Колонки.Добавить("НоменклатураНаименование",              Новый ОписаниеТипов("Строка"));
			ДеревоЗначений.Колонки.Добавить("НоменклатураСопоставленаАвтоматически", Новый ОписаниеТипов("Булево"));
			ДеревоЗначений.Колонки.Добавить("СтрокаСопоставлена",                    Новый ОписаниеТипов("Булево"));
			ДеревоЗначений.Колонки.Добавить("КоличествоНоменклатурыДляВыбора",       Новый ОписаниеТипов("Число"));
			ДеревоЗначений.Колонки.Добавить("АртикулОтличается",                     Новый ОписаниеТипов("Булево"));
			ДеревоЗначений.Колонки.Добавить("НоменклатураНаименованиеОтличается",    Новый ОписаниеТипов("Булево"));
			ДеревоЗначений.Колонки.Добавить("ЦенаНеРаспознана",                      Новый ОписаниеТипов("Булево"));
		КонецЕсли;
		
	Иначе
		ДеревоЗначений.Колонки.Добавить("ЦеноваяГруппа",      Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"));
		ДеревоЗначений.Колонки.Добавить("РеквизитСортировки", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Для Каждого ВидЦены Из Форма.ВыбранныеЦены Цикл
		
		Если ВидЦены.Выбрана Или ВидЦены.Влияет Тогда
			
			ИмяКолонки = ВидЦены.ИмяКолонки;
			
			ДеревоЗначений.Колонки.Добавить(                          ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)), ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("СтараяЦена"              + ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)), ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("ПроцентИзменения"        + ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(05, 2, ДопустимыйЗнак.Любой)),           ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("СуммаИзменения"          + ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)),           ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("ИзмененаВручную"         + ИмяКолонки, Новый ОписаниеТипов("Булево"),                                                                 ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("ИзмененаАвтоматически"   + ИмяКолонки, Новый ОписаниеТипов("Булево"),                                                                 ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("КартинкаИзмененаВручную" + ИмяКолонки, Новый ОписаниеТипов("Число"),                                                                 ВидЦены.Наименование);
			
			Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
				ДеревоЗначений.Колонки.Добавить("Упаковка" + ИмяКолонки, Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"), "Упаковка");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КолонкаОтступ = ДеревоЗначений.Колонки.Добавить("Отступ", Новый ОписаниеТипов("Строка"), НСтр("ru = 'Отступ'"));
	
	РеквизитыТаблицыЦен = Форма.ПолучитьРеквизиты(ИмяТаблицы);
	Для Каждого Реквизит Из РеквизитыТаблицыЦен Цикл
		Если СтрНайти(Реквизит.Имя, "ВидЦены") ИЛИ СтрНайти(Реквизит.Имя, "Отступ") Тогда
			УдаляемыеКолонкиТаблицыЦен.Добавить(ИмяТаблицы + "." + Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Колонка Из ДеревоЗначений.Колонки Цикл
		Если СтрНайти(Колонка.Имя, "ВидЦены") Тогда
			УдаляемаяКолонка = УдаляемыеКолонкиТаблицыЦен.Найти(ИмяТаблицы + "." + Колонка.Имя);
			Если УдаляемаяКолонка <> Неопределено Тогда
				УдаляемыеКолонкиТаблицыЦен.Удалить(УдаляемаяКолонка);
			Иначе
				ДобавляемыеКолонкиТаблицыЦен.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ИмяТаблицы, Колонка.Заголовок, Истина));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ДобавляемыеКолонкиТаблицыЦен.Добавить(Новый РеквизитФормы(КолонкаОтступ.Имя, КолонкаОтступ.ТипЗначения, ИмяТаблицы, КолонкаОтступ.Заголовок, Истина));
	
	Если УдаляемыеКолонкиТаблицыЦен.Количество() > 0 Или ДобавляемыеКолонкиТаблицыЦен.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(ДобавляемыеКолонкиТаблицыЦен, УдаляемыеКолонкиТаблицыЦен);
	КонецЕсли;
	
	Для Каждого ТекЭлемент Из Форма.Элементы[ИмяТаблицы].ПодчиненныеЭлементы Цикл
		Если СтрНайти(ТекЭлемент.Имя, "ВидЦены") ИЛИ СтрНайти(ТекЭлемент.Имя, "Отступ") Тогда
			УдаляемыеЭлементы.Добавить(ТекЭлемент);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Форма.Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	Для Каждого Оформление Из Форма.УсловноеОформление.Элементы Цикл
		Если Оформление.Представление = "СозданоПрограммно" Тогда
			УсловныеОформления.Добавить(Оформление);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Оформление Из УсловныеОформления Цикл
		Форма.УсловноеОформление.Элементы.Удалить(Оформление);
	КонецЦикла;
	
	Для Каждого ВидЦены Из Форма.ВыбранныеЦены Цикл
		
		ИмяКолонки = ВидЦены.ИмяКолонки;
		
		Если ВидЦены.Выбрана ИЛИ ?(Форма.ОтображатьВлияющиеЦены, ВидЦены.Влияет, Ложь) Тогда
			
			ЦветЗаголовка = Неопределено;
			ЦветФона      = Неопределено;
			КартинкаШапки = Неопределено;
			
			Если ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.Вручную Тогда
				
				КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенЗадаватьВручную;
				
			ИначеЕсли ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
				ИЛИ ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении Тогда
				
				ЦветФона      = Метаданные.ЭлементыСтиля.КолонкаЦенЗаполнятьПоДаннымИБ.Значение;
				КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенЗаполнятьПоДаннымИБ;
				
			ИначеЕсли ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен
				ИЛИ ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаДругойВидЦен Тогда
				
				ЦветФона      = Метаданные.ЭлементыСтиля.КолонкаЦенРассчитыватьПоФормуламОтДругихВидовЦен.Значение;
				КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенРассчитыватьПоФормуламОтДругихВидовЦен;
				
			КонецЕсли;
			
			НоваяГруппа = ДобавитьГруппуФормы(Форма, "ГруппаЦены" + ИмяКолонки, Строка(ВидЦены.Ссылка) + ", " + Строка(ВидЦены.Валюта), Истина, КартинкаШапки, ГруппировкаКолонок.Горизонтальная, Неопределено);
			
			Если ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛиста(Форма) Или
				ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛистаПоставщиков(Форма) Тогда
				
				Если ЗначениеЗаполнено(Форма.ДатаДействующихЦен) Тогда
					ДатаДействующихЦен = КонецДня(Форма.ДатаДействующихЦен);
				Иначе
					ДатаДействующихЦен = НачалоДня(Форма.Дата)-1;
				КонецЕсли;
				ЗаголовокКолонкиСтараяЦена = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Цена на %1'"), Формат(ДатаДействующихЦен, "ДЛФ=D"));
				
			Иначе
				
				ЗаголовокКолонкиСтараяЦена = ?(ВидЦены.Выбрана, НСтр("ru='Действующая цена'"), НСтр("ru='Цена'"));
				
			КонецЕсли;
			
			Если ВидЦены.Выбрана Тогда
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              ЗаголовокКолонкиСтараяЦена);
				СтруктураПараметров.Вставить("ШиринаПоля",             12);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
				СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Истина);
				
				НовоеПоле = ДобавитьПолеФормы(Форма,"СтараяЦена" + ИмяКолонки, СтруктураПараметров);
				НовоеПоле.ЦветТекста = WebЦвета.Серый;
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Изменение'"));
				СтруктураПараметров.Вставить("ОбработчикПриИзменении", "Подключаемый_ДеревоЦенЦенаПриИзменении");
				СтруктураПараметров.Вставить("ШиринаПоля",             12);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
				
				НовоеПоле = ДобавитьПолеФормы(Форма,"СуммаИзменения" + ИмяКолонки, СтруктураПараметров);
				
				НовоеПоле.ЦветТекста = WebЦвета.Серый;
				НовоеПоле.ВыделятьОтрицательные = Истина;
				НовоеПоле.Подсказка = НСтр("ru = 'Изменение цены'");
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              "%");
				СтруктураПараметров.Вставить("ОбработчикПриИзменении", "Подключаемый_ДеревоЦенЦенаПриИзменении");
				СтруктураПараметров.Вставить("ШиринаПоля",             6);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
				
				НовоеПоле = ДобавитьПолеФормы(Форма,"ПроцентИзменения" + ИмяКолонки, СтруктураПараметров);
				НовоеПоле.ЦветТекста = WebЦвета.Серый;
				НовоеПоле.ВыделятьОтрицательные = Истина;
				НовоеПоле.Подсказка = НСтр("ru = 'Процент изменения цены'");
				
				НоваяГруппаЦена = ДобавитьГруппуФормы(Форма, "ГруппаЦена" + ИмяКолонки, НСтр("ru='Цена'"), Ложь, Неопределено, ГруппировкаКолонок.ВЯчейке, НоваяГруппа);
				
				НовоеПоле                     = Форма.Элементы.Добавить("ДеревоЦен" + "Картинка" + ИмяКолонки, Тип("ПолеФормы"), НоваяГруппаЦена);
				НовоеПоле.ПутьКДанным         = "ДеревоЦен.ИзмененаВручную" + ИмяКолонки;
				НовоеПоле.Заголовок           = "";
				НовоеПоле.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
				НовоеПоле.Вид                 = ВидПоляФормы.ПолеКартинки;
				НовоеПоле.ТолькоПросмотр      = Истина;
				НовоеПоле.Ширина              = 2;
				НовоеПоле.ОтображатьВШапке    = Ложь;
				НовоеПоле.КартинкаЗначений = БиблиотекаКартинок.Изменить;
				НовоеПоле.КартинкаШапки = БиблиотекаКартинок.Изменить;
				НовоеПоле.Видимость  = Истина;
				НовоеПоле.РастягиватьПоГоризонтали = Ложь;
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Цена'"));
				СтруктураПараметров.Вставить("ОбработчикПриИзменении", "Подключаемый_ДеревоЦенЦенаПриИзменении");
				СтруктураПараметров.Вставить("ШиринаПоля",             12);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
				
				НовоеПоле = ДобавитьПолеФормы(Форма, ИмяКолонки, СтруктураПараметров);
				
				
			Иначе
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              ЗаголовокКолонкиСтараяЦена);
				СтруктураПараметров.Вставить("ШиринаПоля",             12);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
				СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Истина);
				
				НовоеПоле = ДобавитьПолеФормы(Форма,"СтараяЦена" + ИмяКолонки, СтруктураПараметров);
				
				НовоеПоле.ЦветТекста = WebЦвета.Серый;
				
			КонецЕсли;
			
			Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
				НоваяГруппаУпаковка = ДобавитьГруппуФормы(Форма, "ГруппаУпаковки" + ИмяКолонки, НСтр("ru='Ед. изм.'"), Ложь, Неопределено, ГруппировкаКолонок.ВЯчейке, НоваяГруппа);
				
				НоваяСвязь = Новый СвязьПараметраВыбора("Номенклатура", "Элементы." + ИмяТаблицы + ".ТекущиеДанные.Номенклатура", РежимИзмененияСвязанногоЗначения.НеИзменять);
				НовыйМассив = Новый Массив();
				НовыйМассив.Добавить(НоваяСвязь);
				НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Упаковка'"));
				СтруктураПараметров.Вставить("ОбработчикПриИзменении", "Подключаемый_ДеревоЦенУпаковкаПриИзменении");
				СтруктураПараметров.Вставить("ОбработчикНачалоВыбора", "Подключаемый_ДеревоЦенУпаковкаНачалоВыбора");
				СтруктураПараметров.Вставить("ШиринаПоля",             12);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппаУпаковка);
				СтруктураПараметров.Вставить("СвязиПараметровВыбора",  НовыеСвязи);
				СтруктураПараметров.Вставить("ОтображатьВШапке",       Ложь);
				
				ДобавитьПолеФормы(Форма,"Упаковка" + ИмяКолонки, СтруктураПараметров);
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Ед. изм.'"));
				СтруктураПараметров.Вставить("ШиринаПоля",             8);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппаУпаковка);
				СтруктураПараметров.Вставить("ПутьКДанным",            ИмяТаблицы + ".Номенклатура.ЕдиницаИзмерения");
				СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Истина);
				
				ДобавитьПолеФормы(Форма, "ЕдиницаИзмерения" + ИмяКолонки, СтруктураПараметров);
				
			Иначе
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Ед. изм.'"));
				СтруктураПараметров.Вставить("ШиринаПоля",             8);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
				СтруктураПараметров.Вставить("ПутьКДанным",            ИмяТаблицы + ".Номенклатура.ЕдиницаИзмерения");
				СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Истина);
				
				ДобавитьПолеФормы(Форма, "ЕдиницаИзмерения" + ИмяКолонки, СтруктураПараметров);
			КонецЕсли;
			
			// Условное оформление увеличившихся цен
			НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
			НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
			НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
			НовыйЭлементУсловногоОформления.Использование = Истина;
			
			ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + ИмяКолонки);
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
			ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".СтараяЦена" + ИмяКолонки);
			
			НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
			НовоеПоле.Использование = Истина;
			НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ИмяКолонки);
			
			НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСиний);
			
			// Условное оформление уменьшившихся цен
			НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
			НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
			НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
			НовыйЭлементУсловногоОформления.Использование = Истина;
			
			ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + ИмяКолонки);
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
			ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".СтараяЦена" + ИмяКолонки);
			
			НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
			НовоеПоле.Использование = Истина;
			НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ИмяКолонки);
			
			НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноЗеленый);
			
			// Условное оформление единиц измерения
			НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(Форма, "ДеревоЦенЕдиницаИзмерения" + ИмяКолонки, "ДеревоЦен.Упаковка" + ИмяКолонки);
			
			Если ЭтоРегистрацияЦенПоставщика(Форма) Тогда
				
				// В регистрации цен поставщика - пустая цена не регистрируется при проведении
				НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
				НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
				НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
				НовыйЭлементУсловногоОформления.Использование = Истина;
				
				ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + ИмяКолонки);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = 0;
				
				ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".ХарактеристикиИспользуются");
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = Ложь;
				
				НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
				НовоеПоле.Использование = Истина;
				НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ИмяКолонки);
				
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не изменяется>'"));
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
				
				//
				
				НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
				НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
				НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
				НовыйЭлементУсловногоОформления.Использование = Истина;
				
				ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + ИмяКолонки);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = 0;
				
				ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".Характеристика");
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
				
				НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
				НовоеПоле.Использование = Истина;
				НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ИмяКолонки);
				
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не изменяется>'"));
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
				
				// В регистрации цен поставщика - пустая цена не регистрируется при проведении
				НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
				НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
				НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
				НовыйЭлементУсловногоОформления.Использование = Истина;
				
				ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + ИмяКолонки);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = 0;
				
				НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
				НовоеПоле.Использование = Истина;
				НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ПроцентИзменения" + ИмяКолонки);
				
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ШиринаПоля",             30);
	СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Истина);
	
	НовоеПоле = ДобавитьПолеФормы(Форма, "Отступ", СтруктураПараметров);
	НовоеПоле.ЦветТекста = WebЦвета.Серый;
	НовоеПоле.Видимость  = Истина;
	НовоеПоле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовоеПоле.РастягиватьПоГоризонтали = Истина;

	ДеревоЦенЗначение = Форма.РеквизитФормыВЗначение(ИмяТаблицы);
	ДеревоЦенЗначение.Колонки.Очистить();
	
	Для Каждого Колонка Из ДеревоЗначений.Колонки Цикл
		ДеревоЦенЗначение.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Форма.ЗначениеВРеквизитФормы(ДеревоЦенЗначение, ИмяТаблицы);
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "ВыбранныеЦеныИзменены") Тогда
		Форма.ВыбранныеЦеныИзменены = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&Вместо("ДобавитьТоварыПредприятия")
Функция уст_ц_ДобавитьТоварыПредприятия(Форма, Знач ТаблицаТовары, КэшДанных) Экспорт
	
	ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаТовары, "Индекс");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Индекс         КАК Индекс,
	|	Таблица.Номенклатура   КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатура
	|ИЗ
	|	&Таблица КАК Таблица
	|ГДЕ
	|	Таблица.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаНоменклатура.Номенклатура.Наименование     КАК Наименование,
	|	ТаблицаНоменклатура.Номенклатура                  КАК Номенклатура,
	|	ТаблицаНоменклатура.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаНоменклатура.Номенклатура.ЦеноваяГруппа    КАК ЦеноваяГруппа,
	|	ТаблицаНоменклатура.Характеристика                КАК Характеристика,
	|	ТаблицаНоменклатура.Номенклатура.Артикул          КАК Артикул,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатура.Номенклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаНоменклатура.Индекс
	|ИТОГИ ПО
	|	Номенклатура";
	
	Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатуры.Номенклатура   КАК Номенклатура,
		|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
		|	ЦеныНоменклатуры.Упаковка       КАК Упаковка,
		|	ЦеныНоменклатуры.ВидЦены        КАК ВидЦены
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДокумента, (Номенклатура, Характеристика) В (ВЫБРАТЬ Т.Номенклатура, Т.Характеристика ИЗ ТаблицаНоменклатура КАК Т) И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатуры
		|";
	КонецЕсли;

	Запрос.УстановитьПараметр("Таблица",       ТаблицаТовары);
	Запрос.УстановитьПараметр("ВидыЦен",       УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(Форма));
	Запрос.УстановитьПараметр("ДатаДокумента", КонецДня(ДатаДокумента(Форма)));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаНоменклатура = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
		Упаковки = РезультатЗапроса[2].Выгрузить();
		Упаковки.Индексы.Добавить("Номенклатура, Характеристика");
	КонецЕсли;
	
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
	ТаблицаНоменклатуры = СоздатьТаблицуНоменклатуры();
	ТаблицаНоменклатуры.Колонки.Добавить("СтрокаДереваЦен");
	
	ЭлементыНоменклатура = Форма.ДеревоЦен.ПолучитьЭлементы();
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика", ВыборкаНоменклатура.Номенклатура, ПустаяХарактеристика);
		НайденнаяСтрока = НайтиСтрокуДереваЦен(Форма, ПараметрыОтбора, КэшДанных);
		
		Если НайденнаяСтрока <> Неопределено Тогда
			ЭлементНоменклатура = НайденнаяСтрока;
		Иначе
			
			ЭлементНоменклатура = ЭлементыНоменклатура.Добавить();
			ЗаполнитьЗначенияСвойств(ЭлементНоменклатура, ВыборкаНоменклатура);
			УстановкаЦенКлиентСервер.ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементНоменклатура);
			
			НоваяСтрокаТЗ = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ЭлементНоменклатура);
			НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементНоменклатура;
			
			ЗаполнитьЗначенияСвойств(ТаблицаНоменклатуры.Добавить(), НоваяСтрокаТЗ);
			
			Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
				
				ПараметрыПоиска = Новый Структура("Номенклатура, Характеристика", ЭлементНоменклатура.Номенклатура, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				
				НайденныеСтроки = Упаковки.НайтиСтроки(ПараметрыПоиска);
				Для Каждого ВыборкаУпаковки Из НайденныеСтроки Цикл
					ЭлементНоменклатура["Упаковка" + ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены, КэшДанных)] = ВыборкаУпаковки.Упаковка;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
			
			ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
			Пока ВыборкаХарактеристики.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаХарактеристики.Характеристика) Тогда
					
					ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика", ВыборкаХарактеристики.Номенклатура, ВыборкаХарактеристики.Характеристика);
					НайденнаяСтрока = НайтиСтрокуДереваЦен(Форма, ПараметрыОтбора, КэшДанных);
					
					Если НайденнаяСтрока <> Неопределено Тогда
						ЭлементХарактеристика = НайденнаяСтрока;
					Иначе
						
						ЭлементХарактеристика = ЭлементыХарактеристики.Добавить();
						ЗаполнитьЗначенияСвойств(ЭлементХарактеристика, ВыборкаХарактеристики);
						УстановкаЦенКлиентСервер.ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементХарактеристика);
						
						НоваяСтрокаТЗ = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ЭлементХарактеристика);
						НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементХарактеристика;
						
						ЗаполнитьЗначенияСвойств(ТаблицаНоменклатуры.Добавить(), НоваяСтрокаТЗ);
						
						Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
							
							ПараметрыПоиска = Новый Структура("Номенклатура,Характеристика", ЭлементХарактеристика.Номенклатура, ЭлементХарактеристика.Характеристика);
							
							НайденныеСтроки = Упаковки.НайтиСтроки(ПараметрыПоиска);
							Для Каждого ВыборкаУпаковки Из НайденныеСтроки Цикл
								ЭлементХарактеристика["Упаковка" + ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены, КэшДанных)] = ВыборкаУпаковки.Упаковка;
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаНоменклатуры;
	
КонецФункции

&Вместо("ТаблицаСоответствия")
Процедура уст_ц_ТаблицаСоответствия(Форма, КэшДанных)
	
	КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = СоздатьТаблицуНоменклатуры();
	КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Колонки.Добавить("СтрокаДереваЦен");
	
	ИерархическийСписок = Истина;
	Если ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыКоллекция") Тогда
		ЭлементыНоменклатура = Форма.ДеревоЦен;
		ИерархическийСписок = Ложь;
	Иначе
		ЭлементыНоменклатура = Форма.ДеревоЦен.ПолучитьЭлементы();
	КонецЕсли;
	
	Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
		
		Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
			
			НоваяСтрокаТЗ = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ЭлементНоменклатура);
			НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементНоменклатура;
			
			Если ИерархическийСписок Тогда
				ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
				Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
					
					НоваяСтрокаТЗ = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ЭлементХарактеристика);
					НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементХарактеристика;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
			
			НоваяСтрокаТЗ = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ЭлементНоменклатура);
			НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементНоменклатура;
			
		КонецЦикла;
		
	КонецЕсли;
	
	КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Индексы.Добавить("Номенклатура, Характеристика");
	
КонецПроцедуры

&Вместо("КоэффициентыУпаковокНоменклатурыДереваТоваров")
Функция уст_ц_КоэффициентыУпаковокНоменклатурыДереваТоваров(Форма) Экспорт
	
	МассивВидовЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма);
	
	ТаблицаУпаковокНоменклатуры = СоздатьТаблицуУпаковокНоменклатуры();
	
	ЭлементыНоменклатура = Форма.ДеревоЦен.ПолучитьЭлементы();
	
	Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
		
		ДобавитьУпаковкиНоменклатурыСтрокиТаблицыЦенВТаблицу(ЭлементНоменклатура, МассивВидовЦен, ТаблицаУпаковокНоменклатуры);
		
		ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
		Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			ДобавитьУпаковкиНоменклатурыСтрокиТаблицыЦенВТаблицу(ЭлементХарактеристика, МассивВидовЦен, ТаблицаУпаковокНоменклатуры);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат КоэффициентыУпаковокНоменклатуры(ТаблицаУпаковокНоменклатуры);
	
КонецФункции

&Вместо("ДобавитьТоварыПоОтбору")
Функция уст_ц_ДобавитьТоварыПоОтбору(Форма,
	                           АдресВоВременномХранилище,
	                           Знач ТаблицаТовары = Неопределено,
	                           ЗаполняемыйВидЦен = Неопределено,
	                           КэшДанных = Неопределено) Экспорт
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных(КэшДанных);
	
	ЭтоРегистрацияЦенПоставщика = ЭтоРегистрацияЦенПоставщика(Форма);
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	Если ТаблицаТовары = Неопределено Тогда
		ТаблицаТовары = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	КонецЕсли;
	
	Если ТаблицаТовары.Количество() = 0 Тогда
		Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	КонецЕсли;
	
	ТаблицаНоменклатуры = ДобавитьТовары(Форма, ТаблицаТовары, КэшДанных);
	
	ОбновитьСтарыеЦеныНоменклатуры(Форма, КэшДанных);
	
	// Заполним цены по выбранному виду цен
	Если ЗначениеЗаполнено(ЗаполняемыйВидЦен) Тогда
		
		Для каждого СтрокаТаблицы Из ТаблицаТовары Цикл
			
			СтрокаДереваЦен = НайтиСтрокуДереваЦен(Форма, Новый Структура("Номенклатура, Характеристика", СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика), КэшДанных);
			
			НоваяЦена = СтрокаТаблицы.Цена;
			ИмяКолонкиВидаЦены = ИмяКолонкиПоВидуЦены(ЗаполняемыйВидЦен, КэшДанных);
			
			Если СтрокаДереваЦен[ИмяКолонкиВидаЦены] <> НоваяЦена Тогда
				
				СтрокаДереваЦен[ИмяКолонкиВидаЦены] = НоваяЦена;
				СтрокаДереваЦен["ИзмененаВручную"       + ИмяКолонкиВидаЦены] = Истина;
				СтрокаДереваЦен["ИзмененаАвтоматически" + ИмяКолонкиВидаЦены] = Ложь;
				
				Если СтрокаДереваЦен["СтараяЦена"+ИмяКолонкиВидаЦены] <> 0 Тогда
					СтрокаДереваЦен["ПроцентИзменения"+ИмяКолонкиВидаЦены] = Окр(100*(СтрокаДереваЦен[ИмяКолонкиВидаЦены] - СтрокаДереваЦен["СтараяЦена"+ИмяКолонкиВидаЦены])/СтрокаДереваЦен["СтараяЦена"+ИмяКолонкиВидаЦены],5,2);
				Иначе
					СтрокаДереваЦен["ПроцентИзменения"+ИмяКолонкиВидаЦены] = 0;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Автоматический расчет цен
	Если НЕ ЭтоРегистрацияЦенПоставщика
		И Форма.РассчитыватьАвтоматически Тогда
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("МассивСтрокВидовЦен", УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма));
		
		ЗагрузитьЗначенияБазовыхЦен(
			Форма,
			ТаблицаНоменклатуры,
			КэшДанных,
			СтруктураПараметров);
			
		ВычислитьЦеныПоДаннымИБ(Форма, ТаблицаНоменклатуры,,,КэшДанных);
		
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ПодготовитьДанныеДляРасчетаВычисляемыхЦен(Форма, ТаблицаНоменклатуры, КэшДанных);
		Иначе
			РассчитатьВычисляемыеЦены(Форма, ТаблицаНоменклатуры, КэшДанных);
		КонецЕсли;
		
	КонецЕсли;
	
	// Установим последнюю добавленную строку текущей
	Если ТаблицаНоменклатуры.Количество() > 0 Тогда
		Форма.Элементы.ДеревоЦен.ТекущаяСтрока = ТаблицаНоменклатуры[ТаблицаНоменклатуры.Количество()-1].СтрокаДереваЦен.ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

&Вместо("ЗагрузитьТоварыВДеревоЦен")
Процедура уст_ц_ЗагрузитьТоварыВДеревоЦен(Форма, ВыборкаНоменклатура, КэшДанных)
	
	Если ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыКоллекция") Тогда
		ЭлементыДереваЦен = Форма.ДеревоЦен;
	Иначе
		ЭлементыДереваЦен = Форма.ДеревоЦен.ПолучитьЭлементы();
	КонецЕсли;
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ЭлементНоменклатура = НайтиСтрокуДереваЦен(Форма, ВыборкаНоменклатура, КэшДанных);
		
		Если Не ЗначениеЗаполнено(ВыборкаНоменклатура.ВидЦены) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементНоменклатура = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаНоменклатура.ВидЦены, КэшДанных);
		
		ЭлементНоменклатура[                     ИмяКолонки] = ВыборкаНоменклатура.Цена;
		ЭлементНоменклатура["СтараяЦена"       + ИмяКолонки] = ВыборкаНоменклатура.ДействующаяЦена;
		Если ЗначениеЗаполнено(ВыборкаНоменклатура.ДействующаяЦена) Тогда
			ЭлементНоменклатура["СуммаИзменения"   + ИмяКолонки] = ВыборкаНоменклатура.Цена - ВыборкаНоменклатура.ДействующаяЦена;
		КонецЕсли;
		ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = ВыборкаНоменклатура.Процент;
		Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
			ЭлементНоменклатура["Упаковка"         + ИмяКолонки] = ВыборкаНоменклатура.Упаковка;
		КонецЕсли;
		ЭлементНоменклатура["ИзмененаВручную"  + ИмяКолонки] = ВыборкаНоменклатура.ЦенаИзмененаВручную;
		
	КонецЦикла;
	
КонецПроцедуры

&Вместо("СоздатьТаблицуНоменклатурыПоДеревуЦен")
Функция уст_ц_СоздатьТаблицуНоменклатурыПоДеревуЦен(Форма) Экспорт
	
	ТаблицаНоменклатуры = СоздатьТаблицуНоменклатуры();
	
	ЭлементыНоменклатура = Форма.ДеревоЦен.ПолучитьЭлементы();
	
	Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
		
		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементНоменклатура);
		
		ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
		
		Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			
			НоваяСтрока = ТаблицаНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементХарактеристика);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаНоменклатуры;
	
КонецФункции

&Вместо("ПоместитьЦеныВТабличнуюЧасть")
Процедура уст_ц_ПоместитьЦеныВТабличнуюЧасть(Параметры) Экспорт
	
	ТабличныеЧасти = Новый Массив;
	
	ТолькоИзмененные = Ложь;
	Если Параметры.Свойство("ТолькоИзмененные") Тогда
		ТолькоИзмененные = Параметры.ТолькоИзмененные;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Документы) = Тип("Массив") Тогда
		Для Каждого Документ Из Параметры.Документы Цикл
			Если Параметры.Свойство("РеквизитыНовыхДокументов") Тогда
				ЗаполнитьЗначенияСвойств(Документ, Параметры.РеквизитыНовыхДокументов);
				Если Не ЭтоРегистрацияЦенПоставщика(Параметры.Форма) Тогда
					ПоместитьВидыЦенВТабличнуюЧасть(Параметры.Форма, Документ.ВидыЦен, Истина);
				КонецЕсли;
			КонецЕсли;
			ТабличныеЧасти.Добавить(Документ.Товары);
		КонецЦикла;
	Иначе
		Если Параметры.Свойство("РеквизитыНовыхДокументов") Тогда
			ЗаполнитьЗначенияСвойств(Параметры.Документы, Параметры.РеквизитыНовыхДокументов);
			Если Не ЭтоРегистрацияЦенПоставщика(Параметры.Форма) Тогда
				ПоместитьВидыЦенВТабличнуюЧасть(Параметры.Форма, Параметры.Документы.ВидыЦен, Истина);
			КонецЕсли;
		КонецЕсли;
		ТабличныеЧасти.Добавить(Параметры.Документы.Товары);
	КонецЕсли;
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		ТабличнаяЧасть.Очистить();
	КонецЦикла;
	
	ВидыЦен = Новый Массив;
	Для Каждого ВидЦены Из Параметры.Форма.ВыбранныеЦены Цикл
		Если ВидЦены.Выбрана Или Параметры.СохранятьБазовые И ВидЦены.Влияет Тогда
			ВидыЦен.Добавить(ВидЦены);
		КонецЕсли;
	КонецЦикла;
	Параметры.Вставить("КоличествоВидовЦен", ВидыЦен.Количество());
	
	Если ТабличныеЧасти.Количество() = 0 И Параметры.Свойство("РеквизитыНовыхДокументов") Тогда
		
		Если ЭтоРегистрацияЦенПоставщика(Параметры.Форма) Тогда
			Документ = Документы.РегистрацияЦенНоменклатурыПоставщика.СоздатьДокумент();
		Иначе
			Документ = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Документ, Параметры.РеквизитыНовыхДокументов);
		
		Если Не ЭтоРегистрацияЦенПоставщика(Параметры.Форма) Тогда
			ПоместитьВидыЦенВТабличнуюЧасть(Параметры.Форма, Документ.ВидыЦен, Истина);
		КонецЕсли;
		
		Параметры.Документы.Добавить(Документ);
		ТабличныеЧасти.Добавить(Документ.Товары);
		
	КонецЕсли;
	Параметры.Вставить("ТабличныеЧасти", ТабличныеЧасти);
	Параметры.Вставить("КоличествоСтрок", 0);
	
	ЭлементыНоменклатура = Параметры.Форма.ДеревоЦен.ПолучитьЭлементы();
	Для Каждого ТекЭлементНоменклатура Из ЭлементыНоменклатура Цикл
		
		Если ТолькоИзмененные Тогда
			ЦеныИзменены = ЕстьИзмененияЦенВСтроке(ТекЭлементНоменклатура, ВидыЦен);
			Если ЦеныИзменены Тогда
				КонтрольКоличестваСтрок(Параметры);
				ПоместитьСтрокуЦенВТабличнуюЧасть(Параметры, ТекЭлементНоменклатура);
			КонецЕсли;
		Иначе
			КонтрольКоличестваСтрок(Параметры);
			ПоместитьСтрокуЦенВТабличнуюЧасть(Параметры, ТекЭлементНоменклатура);
		КонецЕсли;
		
		ЭлементыХарактеристики = ТекЭлементНоменклатура.ПолучитьЭлементы();
		Для Каждого ТекЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			
			Если ТолькоИзмененные Тогда
				ЦеныИзменены = ЕстьИзмененияЦенВСтроке(ТекЭлементХарактеристика, ВидыЦен);
				Если ЦеныИзменены Тогда
					КонтрольКоличестваСтрок(Параметры);
					ПоместитьСтрокуЦенВТабличнуюЧасть(Параметры, ТекЭлементХарактеристика);
				КонецЕсли;
			Иначе
				КонтрольКоличестваСтрок(Параметры);
				ПоместитьСтрокуЦенВТабличнуюЧасть(Параметры, ТекЭлементХарактеристика);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&Вместо("ПоместитьСтрокуЦенВТабличнуюЧасть")
Процедура уст_ц_ПоместитьСтрокуЦенВТабличнуюЧасть(Параметры, СтрокаЦен) Экспорт
	
	ЭтоРегистрацияЦенПоставщика = ЭтоРегистрацияЦенПоставщика(Параметры.Форма);
	
	Для Каждого ВидЦены Из Параметры.Форма.ВыбранныеЦены Цикл
		
		Если ВидЦены.Выбрана Или Параметры.СохранятьБазовые И ВидЦены.Влияет Тогда
			
			ИмяКолонки = ВидЦены.ИмяКолонки;
			ЕстьКолонкаЦены = СтрокаЦен.Свойство(ИмяКолонки);
			Если ЕстьКолонкаЦены Тогда
				Цена = СтрокаЦен[ИмяКолонки];
			КонецЕсли;
			
			Если ЭтоРегистрацияЦенПоставщика Тогда
				Если Цена = 0 ИЛИ Не ЕстьКолонкаЦены Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока                = Параметры.ТабличныеЧасти[0].Добавить();
			НоваяСтрока.Номенклатура   = СтрокаЦен.Номенклатура;
			НоваяСтрока.Характеристика = СтрокаЦен.Характеристика;
			Если ЭтоРегистрацияЦенПоставщика Тогда
				НоваяСтрока.НоменклатураПоставщика = СтрокаЦен.НоменклатураПоставщика;
				НоваяСтрока.ВидЦеныПоставщика = ВидЦены.Ссылка;
			Иначе
				НоваяСтрока.ВидЦены = ВидЦены.Ссылка;
			КонецЕсли;
			
			Если ЕстьКолонкаЦены Тогда
				НоваяСтрока.Цена = Цена;
				Если Не ЭтоРегистрацияЦенПоставщика Тогда
					НоваяСтрока.ЦенаИзмененаВручную = СтрокаЦен["ИзмененаВручную" + ИмяКолонки];
				КонецЕсли;
			КонецЕсли;
			
			Если Параметры.Форма.ИспользоватьУпаковкиНоменклатуры Тогда
				ИмяКолонки = "Упаковка" + ИмяКолонки;
				Если СтрокаЦен.Свойство(ИмяКолонки) Тогда
					НоваяСтрока.Упаковка = СтрокаЦен[ИмяКолонки];
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
